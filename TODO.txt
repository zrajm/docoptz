-*- org -*-

* [0/5] `t/*.t` (Test suite)
** TODO Fix tests in `t/parse.t`
*** TODO Test for `(xx A...)...`
    The `(A...)...` test leads to a doubled rule in the outputted FSA, which is
    kinda silly. But this should work just fine here. No?
** TODO Add tests for prefix() function
** TODO Test cases making sure that `set -e` works
** TODO Test cases making sure that `set -u` works
** TODO A test case which tests that `. ./docoptz.sh` loads OK
   Also, make sure that the shell options aren't modified during load (e.g.
   `set -e` should not be enabled by during load).
** TODO Each test should be a function (test1...N)
   This to allow random order testing + test can show ID on failure.
* [1/3] Documentation (`docoptz.html`, `README.md` etc.)
** DONE Add `docoptz.html` web page (with some description)
   CLOSED: [2023-12-10 Sun 21:07]
** TODO Add images referred to in `docoptz.sh` comments
   Are these the Google Note images I drew on my phone? To find the comment
   referring to this search for 'purple' in `docoptz.sh`.
** TODO Explain the inner workings of the code better
* [1/19] `docoptz.sh` (Dash version)
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :END:
** TODO Finish the grammar parsing
*** TODO Disallow empty parentheses/brackets and empty subgroups
    I.e. pipe should not be allowed immediately after pipe or start
    parenthesis/bracket, i.e. not `||`, `(|` or `[|`.

    End parenthesis/bracket should not be allowed immediately after pipe, or
    start parenthesis/bracket, i.e. not `|)`, `()`, or `|]`, `[]`.

    And probably not even: `(]` and `[)`.

    Make sure there are test cases for all of these errors!
*** TODO Disallow non-differentiated branches
    :PROPERTIES:
    :CUSTOM_ID: dissallow-non-differentiated-branches
    :END:
    See for example test `(A...|B)...`.

    Here `A` and `B` both accept any value. so there is nothing to
    differentiate the two branches initially. This should not be allowed.
*** TODO Disallow duplicate rules in output FSA
    :PROPERTIES:
    :CUSTOM_ID: dissallow-duplicate-rules
    :END:
    E.g. Using `(X...)...` produces doubled rules in the FSA output, creating a
    non-deterministic FSA (which would be much harder to run by the code which
    gets the FSA).

    Note that, while `(A...)...` should not be allowed, `(xx A...)...` is
    perfectly valid. The former results in a duplicated rule in the FSA, but
    the latter does not.
*** TODO Missing end parenthesis/bracket gets wrong error message
    :PROPERTIES:
    :CUSTOM_ID: missing-bracket-bad-error-message
    :END:
*** TODO Bad state numbering in groups with subgroups
    :PROPERTIES:
    :CUSTOM_ID: bad-state-numbers
    :END:
    When terminating a parenthesis or bracket each subgroup should end with the
    same final state number, but the algorithm messes the state numbering up if
    one (or more?) of the subgroups contain additional parentheses or brackets.

    For example, when parsing `(A|(B)...)` a broke finite state automaton is
    produced, which instead of the expected GOOD result, produces the BAD
    result below:

        ---------------------------------------------------------------
          (   A   |   (   B   )   ...   )     <- input
        0 ( 0 A 1 | 0 ( 0 B 1 ) 1 ... 1 ) 1   <- input + states (GOOD)
                            |   |     |   |
        0 ( 0 A 1 | 0 ( 0 B 2 ) 2 ... 2 ) 2   <- input + states (BAD)
        ---------------------------------------------------------------

    Upon entering the first group, the algorithm decides to use state `1` for
    the end of the group (as evidenced by the subgroup `0 A 1`), but by the end
    of the second alternative of that group it has instead decided to use `2`
    -- presumably its being confused by the fact that that alternative contains
    another group. This is WRONG as each alternative of a group (in this case
    the first parenthesis/bracket group) MUST always end in the same state
    number.
** [0/3] Glue all the things together into usable whole
*** TODO What else is missing
    How should this code be executed? Simplest interface is prolly something
    like:

        ---------------------------------------------------------------
        . ./docoptz.sh
        docoptz()
        ---------------------------------------------------------------

    This also goes well with just copying the whole Docoptz source into the
    beginning of a shell script that uses it (so that all source can be
    included in just one file).
*** TODO Write function which RULES -> eval:able code
    There should be a function returning a valid FSA executer as a string that
    can be eval:ed. E.g. something like this:
        ---------------------------------------------------------------
        STATE=0; SOFAR=''
        for ARG in "$@"; do
            echo ">>$STATE:$ARG"
            case "$STATE:$ARG" in
                "0:-h") STATE="1" ;;
                "0:--help") STATE="1" ;;
                "0:-t") STATE="1" ;;
                "0:--test") STATE="1" ;;
                "0:-v") STATE="1" ;;
                "0:--version") STATE="1" ;;
                *) warn "Unknown argument '$ARG'${SOFAR:+ after '$SOFAR'}"
                   exit 42 ;;
            esac
            SOFAR="${SOFAR:+ $SOFAR}$ARG"
        done

        # Test if in a final state.
        case "$STATE" in
            1) :;;               # final states (`x|y|z` etc)
            *) warn "Missing argument"; exit 42;;
        esac
        ---------------------------------------------------------------
    This code also needs to:

      + set the DOCOPTZ_<VARIABLE> option names.
      + Handle bundled shortopts.
*** TODO Cleanup Docoptz code / function namespace usage
    All internal Docoptz functions should start with `docoptz_` (to avoid
    namespace collisions) and the number of functions used should be minimized.
** [0/9] FUTURE MILESTONES
*** TODO Options defined separately
    I.e. add an 'Options:' heading, and define options there.
*** TODO Multiple invocations of parse, building up a grammar?
*** TODO Allow 'xxx|yyy' (without parentheses) ??
*** TODO Stop using $IN and $GROUP? (if possible)
*** TODO Remove dead code
*** TODO Allow optional optargs `--color[=WHEN]`
    Should this allow for both `--color[=WHEN]` and `--color[=(yes|no|auto)]`
    syntax? What would this look like in the outputted options?
*** TODO Allow arguments to wrap over multiple lines
    Like so:
        ---------------------------------------------------------------
        Usage: git [-C PATH] [-c NAME=VALUE] [--exec-path[=PATH]]
                   [--html-path] [--man-path] [--info-path]
                   [-p | --paginate | -P | --no-pager]
                   [--no-replace-objects] [--bare] [--git-dir=PATH]
                   [--work-tree=PATH] [--namespace=NAME]
                   [--super-prefix=PATH] [--config-env=NAME=ENVVAR]
                   COMMAND [ARGS]
               git (--version|--help)
        The stupid content tracker.
        ---------------------------------------------------------------
*** TODO Allow options to wrap over multiple lines
    E.g. the following. Notice the comma before the description on the first
    line!
        ---------------------------------------------------------------
        Options:
          -c,--color[=(yes|no|auto)],  Colorize the output (default: 'yes')
             --colour[=(yes|no|auto)]  (default without option is 'auto')
        ---------------------------------------------------------------
*** TODO Multiple options lists(?)
    Should be able to split options into groups, in the way `grep` does.

        ---------------------------------------------------------------
        Pattern selection and interpretation:
          -E, --extended-regexp     PATTERNS are extended regular expressions
          -F, --fixed-strings       PATTERNS are strings
          ...

        Miscellaneous:
          -s, --no-messages         suppress error messages
          -v, --invert-match        select non-matching lines
          ...
        ---------------------------------------------------------------

    The way Docopt support this is by allowing any number of options headings
    as long as they all end in 'options:'. But maybe we can do something
    cleverer that would also allow for subcommands being listed this way? E.g.
    something like this? (NOTE: This conflicts with the current syntax, as
    options need to start with '-', also we need to make sure descriptions can
    be line-wrapped.)

        ---------------------------------------------------------------
        Usage: merpstore [OPTIONS]... [COMMAND [ARGS]]

        Options:
          -f,--file=NAME  File to read (default: ~/.merpstorerc)
          -h,--help       Display this help and exit
          -V,--version    Output version information and exit

        Commands:
          list                List all keys of all the currently stored
                              key-value pairs
          get KEY...          Get value of KEY
          set (KEY VALUE)...  Set KEY to VALUE
        ---------------------------------------------------------------
** [0/0] DONE
** DONE Rename to use .sh or .dash file suffix
   CLOSED: [2023-12-03 Sun 13:29]
   So that programs in other programming languages can coexist in the same
   directory eventually.
* [0/0] `docoptz.pl` (Perl version)
* FINISHED
** [8/8] Use Dashtap test framework
*** DONE Remove tests from `docoptz.sh` source, put in separate directory
    CLOSED: [2023-12-09 Sat 16:33]
    Right now the tests cases are part of `docoptz.sh`, but that only works
    during (part of the) development process. The tests should be put into
    their own separate directory.
*** DONE Code in `docoptz.sh` should only contain functions
    CLOSED: [2023-12-09 Sat 20:59]
    After sourcing `docoptz.sh` only new functions should be created, nothing
    else about the shell environment (or options) should be affected.
*** DONE Don't use global `set -e` in `docoptz.sh`
    CLOSED: [2023-12-09 Sat 21:21]
    Instead added `set -e` to all tests.
*** DONE Include Dashtap as submodule
    CLOSED: [2023-12-10 Sun 02:34]
*** [3/3] Convert test files to Dashtap format
**** DONE Verify that 'function_exists' has right func name in each test file
     CLOSED: [2023-12-10 Sun 18:03]
**** DONE Title should have double quoted arg "..." (not '...')
     CLOSED: [2023-12-10 Sun 20:23]
**** DONE Make sure each `dumpenv` tests creates a tempdir
     CLOSED: [2023-12-10 Sun 20:23]
*** DONE Update README with relevant test instructions
    CLOSED: [2023-12-10 Sun 20:33]
*** DONE Update README with how to use submodules (for Dashtap)
    CLOSED: [2023-12-10 Sun 20:37]
*** DONE Rename variable 'RETVAL' -> 'RC' in test cases
    CLOSED: [2023-12-11 Mon 23:43]
*** DONE Unset 'RC' after it's been used in each test case
    CLOSED: [2023-12-12 Tue 01:04]
** [3/3] README
*** DONE Describe what docoptz is
    CLOSED: [2023-12-11 Mon 23:37]
*** DONE Link to docopt
    CLOSED: [2023-12-11 Mon 23:37]
*** DONE License
    CLOSED: [2023-12-04 Mon 14:23]
** DONE Rename project 'zdocopt' -> 'docoptz'
   CLOSED: [2023-12-09 Sat 20:35]
* [eof]
